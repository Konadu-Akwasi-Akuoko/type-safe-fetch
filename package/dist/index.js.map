{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { ZodTypeAny, z } from \"zod\";\n\n/**\n * Makes an HTTP request and handles the response.\n * @param url - The URL of the API endpoint to send the request to.\n * @param options - An object containing the options for the request if any, excluding the `body` option.\n * @param responseSchema - A Zod schema that defines the expected shape of the response data.\n * @returns An object with three methods: `query`, `bodySchema`, and `mutation`.\n */\nexport default function tsFetch<T extends ZodTypeAny>({\n  url,\n  options,\n  responseSchema,\n}: {\n  url: string;\n  options: Omit<RequestInit, \"body\">;\n  responseSchema: T;\n}) {\n  return {\n    /**\n     * Sends a `GET` request to a specified URL with the provided options.\n     * Returns the response data, plus a json method parsed according to the provided response schema.\n     * @returns An object with methods to access the response data, such as `arrayBuffer`, `blob`, `body`, `clone`, `formData`, `headers`, `ok`, `redirected`, `status`, `statusText`, `text`, `type`, `url`, and `json`. The `json` method returns the parsed JSON data.\n     */\n    query: async (): Promise<{\n      /**\n       * Sends an HTTP request and returns the response as an ArrayBuffer.\n       */\n      arrayBuffer: () => Promise<ArrayBuffer>;\n      /**\n       * Sends an HTTP request and returns the response as a Blob.\n       */\n      blob: () => Promise<Blob>;\n      /**\n       * The body of the response.\n       */\n      body: ReadableStream<Uint8Array> | null;\n      /**\n       * A boolean indicating whether the response body has been used.\n       */\n      bodyUsed: boolean;\n      /**\n       * Creates a clone of the response.\n       */\n      clone: () => Response;\n      /**\n       * Sends an HTTP request and returns the response as FormData.\n       */\n      formData: () => Promise<FormData>;\n      /**\n       * The headers of the response.\n       */\n      headers: Headers;\n      /**\n       * A boolean indicating whether the request was successful.\n       */\n      ok: boolean;\n      /**\n       * A boolean indicating whether the request was redirected.\n       */\n      redirected: boolean;\n      /**\n       * The status code of the response.\n       */\n      status: number;\n      /**\n       * The status message of the response.\n       */\n      statusText: string;\n      /**\n       * Sends an HTTP request and returns the response as text.\n       */\n      text: () => Promise<string>;\n      /**\n       * The type of the response.\n       */\n      type: ResponseType;\n      /**\n       * The URL of the response.\n       */\n      url: string;\n      /**\n       * Sends an HTTP request and returns the response object.\n       * @returns The parsed JSON response.\n       * @throws {Error} If the response body is not valid JSON or does not match the provided schema.\n       */\n      json: () => Promise<z.infer<typeof responseSchema>>;\n    }> => {\n      const request = await fetch(url, options);\n      const {\n        body,\n        bodyUsed,\n        headers,\n        ok,\n        redirected,\n        status,\n        statusText,\n        type,\n        url: responseUrl,\n      }: Response = request;\n\n      return {\n        arrayBuffer: () => request.arrayBuffer(),\n        blob: () => request.blob(),\n        body,\n        bodyUsed,\n        clone: () => request.clone(),\n        formData: () => request.formData(),\n        headers,\n        ok,\n        redirected,\n        status,\n        statusText,\n        text: () => request.text(),\n        type,\n        url: responseUrl,\n        json: async () => {\n          const data: z.infer<typeof responseSchema> = await request.json();\n          return data;\n        },\n      };\n    },\n    /**\n     * Sets the Zod schema for the request body and returns an object with a `mutation` method.\n     * @param bodySchema - A Zod schema that defines the shape of the request body.\n     * @returns An object with a `mutation` method for sending a `POST` | `PUT` | `PATCH` | `DELETE`\n     * request with a request body that is parsed according to the provided body schema.\n     */\n    bodySchema: function <U extends ZodTypeAny>(bodySchema: U) {\n      return {\n        /**\n         * Sends a `POST`, `PUT`, `PATCH`, or `DELETE` request to a specified URL with the provided options and a request body.\n         * Returns the response data with a json method parsed according to the provided response schema.\n         * @param bodyObject - The request body object that will be sent with the HTTP request. It should match the shape defined by the `bodySchema` provided when calling the `bodySchema` method of `tsFetch`.\n         * @returns An object with methods to access the response data, such as `arrayBuffer`, `blob`, `body`, `clone`, `formData`, `headers`, `ok`, `redirected`, `status`, `statusText`, `text`, `type`, `url`, and `json`. The `json` method returns the parsed JSON data.\n         */\n        mutation: async (\n          bodyObject: z.infer<typeof bodySchema>\n        ): Promise<{\n          /**\n           * Sends an HTTP request and returns the response as an ArrayBuffer.\n           */\n          arrayBuffer: () => Promise<ArrayBuffer>;\n          /**\n           * Sends an HTTP request and returns the response as a Blob.\n           */\n          blob: () => Promise<Blob>;\n          /**\n           * The body of the response.\n           */\n          body: ReadableStream<Uint8Array> | null;\n          /**\n           * A boolean indicating whether the response body has been used.\n           */\n          bodyUsed: boolean;\n          /**\n           * Creates a clone of the response.\n           */\n          clone: () => Response;\n          /**\n           * Sends an HTTP request and returns the response as FormData.\n           */\n          formData: () => Promise<FormData>;\n          /**\n           * The headers of the response.\n           */\n          headers: Headers;\n          /**\n           * A boolean indicating whether the request was successful.\n           */\n          ok: boolean;\n          /**\n           * A boolean indicating whether the request was redirected.\n           */\n          redirected: boolean;\n          /**\n           * The status code of the response.\n           */\n          status: number;\n          /**\n           * The status message of the response.\n           */\n          statusText: string;\n          /**\n           * Sends an HTTP request and returns the response as text.\n           */\n          text: () => Promise<string>;\n          /**\n           * The type of the response.\n           */\n          type: ResponseType;\n          /**\n           * The URL of the response.\n           */\n          url: string;\n          /**\n           * Sends an HTTP request and returns the response object.\n           * @returns The parsed JSON response.\n           * @throws {Error} If the response body is not valid JSON or does not match the provided schema.\n           */\n          json: () => Promise<z.infer<typeof responseSchema>>;\n        }> => {\n          const request = await fetch(url, {\n            ...options,\n            body: JSON.stringify(bodyObject),\n          });\n          const {\n            body,\n            bodyUsed,\n            headers,\n            ok,\n            redirected,\n            status,\n            statusText,\n            type,\n            url: responseUrl,\n          }: Response = request;\n\n          return {\n            arrayBuffer: () => request.arrayBuffer(),\n            blob: () => request.blob(),\n            body,\n            bodyUsed,\n            clone: () => request.clone(),\n            formData: () => request.formData(),\n            headers,\n            ok,\n            redirected,\n            status,\n            statusText,\n            text: () => request.text(),\n            type,\n            url: responseUrl,\n            json: async () => {\n              const data: z.infer<typeof responseSchema> = await request.json();\n              return data;\n            },\n          };\n        },\n      };\n    },\n    /**\n     * Sends a `POST` | `PUT` | `PATCH` | `DELETE` request to the specified URL with the provided options without a request body.\n     * @returns The response data, parsed according to the provided response schema.\n     */\n    mutation: async (): Promise<{\n      /**\n       * Sends an HTTP request and returns the response as an ArrayBuffer.\n       */\n      arrayBuffer: () => Promise<ArrayBuffer>;\n      /**\n       * Sends an HTTP request and returns the response as a Blob.\n       */\n      blob: () => Promise<Blob>;\n      /**\n       * The body of the response.\n       */\n      body: ReadableStream<Uint8Array> | null;\n      /**\n       * A boolean indicating whether the response body has been used.\n       */\n      bodyUsed: boolean;\n      /**\n       * Creates a clone of the response.\n       */\n      clone: () => Response;\n      /**\n       * Sends an HTTP request and returns the response as FormData.\n       */\n      formData: () => Promise<FormData>;\n      /**\n       * The headers of the response.\n       */\n      headers: Headers;\n      /**\n       * A boolean indicating whether the request was successful.\n       */\n      ok: boolean;\n      /**\n       * A boolean indicating whether the request was redirected.\n       */\n      redirected: boolean;\n      /**\n       * The status code of the response.\n       */\n      status: number;\n      /**\n       * The status message of the response.\n       */\n      statusText: string;\n      /**\n       * Sends an HTTP request and returns the response as text.\n       */\n      text: () => Promise<string>;\n      /**\n       * The type of the response.\n       */\n      type: ResponseType;\n      /**\n       * The URL of the response.\n       */\n      url: string;\n      /**\n       * Sends an HTTP request and returns the response object.\n       * @returns The parsed JSON response.\n       * @throws {Error} If the response body is not valid JSON or does not match the provided schema.\n       */\n      json: () => Promise<z.infer<typeof responseSchema>>;\n    }> => {\n      const request = await fetch(url, options);\n      const {\n        body,\n        bodyUsed,\n        headers,\n        ok,\n        redirected,\n        status,\n        statusText,\n        type,\n        url: responseUrl,\n      }: Response = request;\n\n      return {\n        arrayBuffer: () => request.arrayBuffer(),\n        blob: () => request.blob(),\n        body,\n        bodyUsed,\n        clone: () => request.clone(),\n        formData: () => request.formData(),\n        headers,\n        ok,\n        redirected,\n        status,\n        statusText,\n        text: () => request.text(),\n        type,\n        url: responseUrl,\n        json: async () => {\n          const data: z.infer<typeof responseSchema> = await request.json();\n          return data;\n        },\n      };\n    },\n    /**\n     * Returns the response schema defined in the `tsFetch` function.\n     *\n     * @returns The response schema defined in the `tsFetch` function.\n     */\n    responseType: () => responseSchema,\n  };\n}\n"],"mappings":"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","names":[]}